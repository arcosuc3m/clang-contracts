# RUN: llc -O0 -mtriple=aarch64-apple-ios -run-pass=legalizer -global-isel %s -o - | FileCheck %s

---
name:            test_scalar_or_small
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
body: |
  bb.0:
    liveins: %x0, %x1, %x2, %x3
    ; CHECK-LABEL: name: test_scalar_or_small
    ; CHECK: [[OP0:%.*]](s32) = G_TRUNC %0
    ; CHECK: [[OP1:%.*]](s32) = G_TRUNC %1
    ; CHECK: [[RES32:%.*]](s32) = G_OR [[OP0]], [[OP1]]
    ; CHECK: [[RES:%.*]](s8) = G_TRUNC [[RES32]](s32)

    %0(s64) = COPY %x0
    %1(s64) = COPY %x1
    %2(s8) = G_TRUNC %0
    %3(s8) = G_TRUNC %1
    %4(s8) = G_OR %2, %3
    %5(s64) = G_ANYEXT %2
    %x0 = COPY %5
...

---
name:            test_big_scalar_power_of_2
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
  - { id: 7, class: _ }
  - { id: 8, class: _ }
body: |
  bb.0:
    liveins: %x0, %x1, %x2, %x3
    ; CHECK-LABEL: name: test_big_scalar_power_of_2
    ; CHECK: [[OP0_0:%.*]](s64) = COPY %x0
    ; CHECK-NEXT: [[OP0_1:%.*]](s64) = COPY %x1
    ; CHECK-NEXT: [[OP1_0:%.*]](s64) = COPY %x2
    ; CHECK-NEXT: [[OP1_1:%.*]](s64) = COPY %x3
    ; CHECK-NEXT: [[RES_0:%.*]](s64) = G_OR [[OP0_0]], [[OP1_0]]
    ; CHECK-NEXT: [[RES_1:%.*]](s64) = G_OR [[OP0_1]], [[OP1_1]]
    ; We have a temporary G_MERGE_VALUES in the legalizer
    ; that gets cleaned up with the G_UNMERGE_VALUES.
    ; Thus,
    ; tmp = G_MERGE_VALUES [[RES_0]], [[RES_1]]
    ; %7, %8 = G_UNMERGE_VALUES tmp
    ; %x0 = COPY %7
    ; %x1 = COPY %8
    ; translates into
    ; CHECK-NEXT: %x0 = COPY [[RES_0]]
    ; CHECK-NEXT: %x1 = COPY [[RES_1]]

    %0(s64) = COPY %x0
    %1(s64) = COPY %x1
    %2(s64) = COPY %x2
    %3(s64) = COPY %x3
    %4(s128) = G_MERGE_VALUES %0, %1
    %5(s128) = G_MERGE_VALUES %2, %3
    %6(s128) = G_OR %4, %5
    %7(s64), %8(s64) = G_UNMERGE_VALUES %6
    %x0 = COPY %7
    %x1 = COPY %8
    RET_ReallyLR implicit %x0, implicit %x1
...
